
import numpy as np
from scipy import interpolate
from sage.plot.plot3d.shapes2 import frame_labels
from sage.plot.point import Point


x_arr = []
y_arr = []

def func_lagrange_test(x):
    return y_arr[x]

# def func(x):
#     return ((1+x)^(1/2))

def lagrange_coefficient(k, n):
    g(x) = 1
    for i in xrange(0, n+1):
        if i != k:
            g(x) = g(x) * ((x - x_arr[i])/(x_arr[k] - x_arr[i]))
    return g(x)

def lagrange_polynomial(n):
    h(x) = 0;
    for k in xrange(0, n+1):
        h(x) = h(x) + (lagrange_coefficient(k,n)*func_lagrange_test(k).n())
    return h
    
# # # # # # # # # # # # # # # # # # # # # # #
#
#        TEST THE LAGRANGE POLYNOMIAL
#
# print(f(0.43))
def test_lagrange():
    lp = lagrange_polynomial(2);
    evaluate1 = 1.4
    print expand(lp)
    print "P(", evaluate1, ") =", lp(evaluate1).n()
    print "f(", evaluate1, ") = ", f(1.4)
    print "Absolute Error: ", abs(f(1.4) - lp(evaluate1).n())
    return 0
# print("|Function(", evaluate1, ") - f(", evaluate1, ")|",\
#        lp(evaluate1).n() - func(evaluate1))
#
# # # # # # # # # # # # # # # # # # # # # # #


# ENTRY POINT:

def main():
    print "Main:::\n"

    # g(x) = cos(x/3) - 2*cos(x/5) + 5*sin(x/4) + 8 
    # p = plot(indefinite_integral(g(x),x), 100, 600)
    # p.show()

    # f(x) = x^3 - 3*x^2*(2^-x) + 3*x*(4^-x) - 8^-x  
    # p = plot(f(x),x, 0.6, 0.7)
    # p.show()

    # v = [-10,200]
    # v = [-100,100]
    # print "FUNCTION: f =", f, "\n"
    # print "ACCEPTABLE_ERROR_CONST: ", ACCEPTABLE_ERROR_CONST, "\n"
    # print "INTERVAL: v =", v, "\n"
    # #0.6411895751953125

    # interval_left  = v[0]
    # interval_right = v[1]

    # print "BISECTION METHOD:"
    # retval = bisection_method(f, interval_left, interval_right)
    # # print retval.n()

    # print "NEWTONS METHOD:"
    # retval = newtons_method(f, interval_left, interval_right)
    # # print retval.n()

    # print "ALTERNATIVE NEWTONS METHOD:"
    # retval = alternative_newtons_method(f, interval_left, interval_right)
    # # print retval.n()

    points = [  (1.000000, 100000.000000, 0.013029), 
 (1.000000, 1000000.000000, 0.129216), 
 (1.000000, 3000000.000000, 0.383280), 
 (1.000000, 4000000.000000, 0.510822), 
 (1.000000, 4200000.000000, 0.537838), 
 (1.000000, 4709890.000000, 0.603153), 
 (1.000000, 4900000.000000, 0.627845), 
 (1.000000, 5000000.000000, 0.638569), 
 (1.000000, 9000000.000000, 1.155299), 
 (2.000000, 100000.000000, 0.006515), 
 (2.000000, 1000000.000000, 0.064710), 
 (2.000000, 3000000.000000, 0.193905), 
 (2.000000, 4000000.000000, 0.258662), 
 (2.000000, 4200000.000000, 0.271412), 
 (2.000000, 4709890.000000, 0.304025), 
 (2.000000, 4900000.000000, 0.316348), 
 (2.000000, 5000000.000000, 0.322912), 
 (2.000000, 9000000.000000, 0.580948), 
 (3.000000, 100000.000000, 0.004348), 
 (3.000000, 1000000.000000, 0.043140), 
 (3.000000, 3000000.000000, 0.129611), 
 (3.000000, 4000000.000000, 0.172974), 
 (3.000000, 4200000.000000, 0.181883), 
 (3.000000, 4709890.000000, 0.203227), 
 (3.000000, 4900000.000000, 0.210915), 
 (3.000000, 5000000.000000, 0.215450), 
 (3.000000, 9000000.000000, 0.388759), 
 (7.000000, 100000.000000, 0.002231), 
 (7.000000, 1000000.000000, 0.022040), 
 (7.000000, 3000000.000000, 0.065348), 
 (7.000000, 4000000.000000, 0.086940), 
 (7.000000, 4200000.000000, 0.091603), 
 (7.000000, 4709890.000000, 0.103729), 
 (7.000000, 4900000.000000, 0.107849), 
 (7.000000, 5000000.000000, 0.110036), 
 (7.000000, 9000000.000000, 0.198359), 
 (13.000000, 100000.000000, 0.001203), 
 (13.000000, 1000000.000000, 0.012572), 
 (13.000000, 3000000.000000, 0.050880), 
 (13.000000, 4000000.000000, 0.075586), 
 (13.000000, 4200000.000000, 0.070137), 
 (13.000000, 4709890.000000, 0.082437), 
 (13.000000, 4900000.000000, 0.082257), 
 (13.000000, 5000000.000000, 0.083918), 
 (13.000000, 9000000.000000, 0.148023), 
 (19.000000, 100000.000000, 0.000788), 
 (19.000000, 1000000.000000, 0.011440), 
 (19.000000, 3000000.000000, 0.044737), 
 (19.000000, 4000000.000000, 0.061400), 
 (19.000000, 4200000.000000, 0.068040), 
 (19.000000, 4709890.000000, 0.067671), 
 (19.000000, 4900000.000000, 0.088117), 
 (19.000000, 5000000.000000, 0.078612), 
 (19.000000, 9000000.000000, 0.145884), 
 (41.000000, 100000.000000, 0.000360), 
 (41.000000, 1000000.000000, 0.004867), 
 (41.000000, 3000000.000000, 0.035105), 
 (41.000000, 4000000.000000, 0.056811), 
 (41.000000, 4200000.000000, 0.050680), 
 (41.000000, 4709890.000000, 0.068539), 
 (41.000000, 4900000.000000, 0.067141), 
 (41.000000, 5000000.000000, 0.071398), 
 (41.000000, 9000000.000000, 0.132200), 
 (69.000000, 100000.000000, 0.000217), 
 (69.000000, 1000000.000000, 0.002165), 
 (69.000000, 3000000.000000, 0.028173), 
 (69.000000, 4000000.000000, 0.045372), 
 (69.000000, 4200000.000000, 0.044374), 
 (69.000000, 4709890.000000, 0.053627), 
 (69.000000, 4900000.000000, 0.049918), 
 (69.000000, 5000000.000000, 0.060164), 
 (69.000000, 9000000.000000, 0.122788), 
 (119.000000, 100000.000000, 0.000126), 
 (119.000000, 1000000.000000, 0.001250), 
 (119.000000, 3000000.000000, 0.004941), 
 (119.000000, 4000000.000000, 0.022317), 
 (119.000000, 4200000.000000, 0.032309), 
 (119.000000, 4709890.000000, 0.034982), 
 (119.000000, 4900000.000000, 0.036074), 
 (119.000000, 5000000.000000, 0.036952), 
 (119.000000, 9000000.000000, 0.109732), 
 (146.000000, 100000.000000, 0.000102), 
 (146.000000, 1000000.000000, 0.001025), 
 (146.000000, 3000000.000000, 0.003538), 
 (146.000000, 4000000.000000, 0.018713), 
 (146.000000, 4200000.000000, 0.023206), 
 (146.000000, 4709890.000000, 0.024626), 
 (146.000000, 4900000.000000, 0.025167), 
 (146.000000, 5000000.000000, 0.028007), 
 (146.000000, 9000000.000000, 0.099636) ]

    # lists for the x y z for interpolation
    x, y, z = [], [], []
    for i in xrange(0, len(points)):
        x.append(points[i][0])
        y.append(points[i][1])
        z.append(points[i][2])
        pass

    prev = 0
    for i in xrange(0, len(points)):
        cur = int(points[i][0])
        if cur != prev:
            prev = cur
            print cur
            pass
        pass

    for i in xrange(0, len(points)):
        print points[i][2]
        pass

    xsort = np.sort(x)
    ysort = np.sort(y)
    zsort = np.sort(z)

    # end list creation

    P=point3d(points,color="red", size=20, opacity=0.5,)
    S = spline(points)
    # spline_plot = plot(S, x, 1, 200)
    # spline_plot.show()
    Bx=point3d([(0,0,0),points[-1]], opacity=0)
    P.show()

    list_plot3d(points, texture='yellow', interpolation_type='linear', hue=.8).show()

    # xz = []

    # for i in xrange(0, len(x)):
    #     xz.append(point(x[i],z[i]))
    #     pass

    # p2d1 = plot(y, z)
    # show(plot(x, z))

    return 0

# set if run as script
# or if run as module but file is main.py
if __name__ == "__main__":
    # executing the main
    status = main()